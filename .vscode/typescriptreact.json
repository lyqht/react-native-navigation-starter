{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	"ReduxComponent": {
		"prefix": "reduxcomponent",
		"body": [
			"import React, { Component } from \"react\";",
			"import { StyleSheet, View } from \"react-native\";",
			"import { connect } from \"react-redux\";",
			"",
			"import { RootState } from \"src/Main\";",
			"",
			"export interface Props extends StateProps, DispatchProps {",
			"}",
			"interface StateProps {",
			"}",
			"interface DispatchProps {",
			"}",
			"",
			"export interface State {",
			"",
			"}",
			"",
			"export class ${1:component} extends Component<Props, State> {",
			"",
			"\tconstructor(props: Props) {",
			"\t\tsuper(props);",
			"\t}",
			"\tpublic render() {",
			"\t\treturn (",
			"\t\t\t<View></View>",
			"\t\t);",
			"\t}",
			"}",
			"",
			"// =============================================================================",
			"// Helper Components",
			"// =============================================================================",
			"",
			"// =============================================================================",
			"// Style",
			"// =============================================================================",
			"interface Style {",
			"",
			"}",
			"",
			"const styles = StyleSheet.create<Style>({",
			"",
			"});",
			"",
			"// =============================================================================",
			"// Redux",
			"// =============================================================================",
			"const mapStateToProps = (state: RootState) => ({",
			"});",
			"",
			"const mapDispatchToProps = {",
			"",
			"};",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${1:component});",
			""
		],
		"description": "React Native Redux connected Component",
	},
	"FunctionComponent": {
		"prefix": "rnstatelesscomponent",
		"body": [
			"import { View } from \"react-native\";",
			"import React from \"react\";",
			"",
			"interface Props {",
			"",
			"}",
			"",
			"export const ${1:component} = (props: Props) => {",
			"\treturn (",
			"\t\t<View />",
			"\t);",
			"};"
		],
		"description": "React Native Redux connected Component"
	},
	"RN-Component": {
		"prefix": "rncomponent",
		"body": [
			"import React, { Component } from \"react\";",
			"import { StyleSheet, View } from \"react-native\";",
			"import { connect } from \"react-redux\";",
			"",
			"export interface Props {",
			"}",
			"",
			"export interface State {",
			"",
			"}",
			"",
			"export default class $0${1:component} extends Component<Props, State> {",
			"",
			"\tconstructor(props: Props) {",
			"\t\tsuper(props);",
			"\t}",
			"\tpublic render() {",
			"\t\treturn (",
			"\t\t\t<View></View>",
			"\t\t);",
			"\t}",
			"}",
			"",
			"// =============================================================================",
			"// Helper Components",
			"// =============================================================================",
			"",
			"// =============================================================================",
			"// Style",
			"// =============================================================================",
			"interface Style {",
			"",
			"}",
			"",
			"const styles = StyleSheet.create<Style>({",
			"",
			"});",
			"",
			""
		],
		"description": "React Native Component"
	},
	"ComponentTest": {
		"prefix": "testComponent",
		"body": [
			"import { shallow, ShallowWrapper } from \"enzyme\";",
			"import React from \"react\";",
			"",
			"import {${1:component}, Props} from \"./${1:component}\";",
			"",
			"const shallowComponent = (overrideProps?: Partial<Props>): ShallowWrapper => {",
			"\treturn shallow(",
			"\t\t<${1:component}",
			"\t\t\t{...overrideProps}",
			"\t\t/>,",
			"\t);",
			"};",
			"",
			"describe(\"$0${1:component}\", () => {",
			"",
			"});",
			""
		],
		"description": "Component Test"
	}
}
